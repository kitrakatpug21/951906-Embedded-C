
Stepper Motor With LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  000002fa  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6d  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047b  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000427  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3e       	cpi	r26, 0xE4	; 228
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  7a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_config>:

#define LCD_PORT PORTD
#define LCD_DDR  DDRD

void LCD_config(uint8_t cmd){
	LCD_PORT &= ~(0b00000001);// RS = 0
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	92 bb       	out	0x12, r25	; 18
	LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 70       	andi	r25, 0x0F	; 15
  8c:	28 2f       	mov	r18, r24
  8e:	20 7f       	andi	r18, 0xF0	; 240
  90:	92 2b       	or	r25, r18
  92:	92 bb       	out	0x12, r25	; 18
	LCD_PORT |= (0b00000010); // EN = 1
  94:	92 b3       	in	r25, 0x12	; 18
  96:	92 60       	ori	r25, 0x02	; 2
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e1       	ldi	r30, 0x1F	; 31
  9c:	fe e4       	ldi	r31, 0x4E	; 78
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_config+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_config+0x22>
  a4:	00 00       	nop
	_delay_ms(10);
	LCD_PORT &= ~(0b00000010); // EN = 0
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	9d 7f       	andi	r25, 0xFD	; 253
  aa:	92 bb       	out	0x12, r25	; 18
  ac:	ef e1       	ldi	r30, 0x1F	; 31
  ae:	fe e4       	ldi	r31, 0x4E	; 78
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_config+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_config+0x34>
  b6:	00 00       	nop
	_delay_ms(10);
	// END OF UPPER NIBBLE (4bit) OF COMMAND
	LCD_PORT &= ~(0b00000001);// RS = 0
  b8:	92 b3       	in	r25, 0x12	; 18
  ba:	9e 7f       	andi	r25, 0xFE	; 254
  bc:	92 bb       	out	0x12, r25	; 18
	LCD_PORT = (LCD_PORT & 0x0F) | ((cmd<<4) & 0xF0);
  be:	22 b3       	in	r18, 0x12	; 18
  c0:	f0 e1       	ldi	r31, 0x10	; 16
  c2:	8f 9f       	mul	r24, r31
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	92 2f       	mov	r25, r18
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	82 bb       	out	0x12, r24	; 18
	LCD_PORT |= (0b00000010); // EN = 1
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	9e e4       	ldi	r25, 0x4E	; 78
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_config+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_config+0x5e>
  e0:	00 00       	nop
	_delay_ms(10);
	LCD_PORT &= ~(0b00000010); // EN = 0
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	ef e1       	ldi	r30, 0x1F	; 31
  ea:	fe e4       	ldi	r31, 0x4E	; 78
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_config+0x6a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_config+0x70>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCD_char>:
	_delay_ms(10);
	// END OF LOWER NIBBLE (4bit) OF COMMAND
}
void LCD_char(char data){
	LCD_PORT |= (0b00000001);// RS = 1
  f6:	92 b3       	in	r25, 0x12	; 18
  f8:	91 60       	ori	r25, 0x01	; 1
  fa:	92 bb       	out	0x12, r25	; 18
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
  fc:	92 b3       	in	r25, 0x12	; 18
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	28 2f       	mov	r18, r24
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	92 2b       	or	r25, r18
 106:	92 bb       	out	0x12, r25	; 18
	LCD_PORT |= (0b00000010); // EN = 1
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	92 60       	ori	r25, 0x02	; 2
 10c:	92 bb       	out	0x12, r25	; 18
 10e:	ef e1       	ldi	r30, 0x1F	; 31
 110:	fe e4       	ldi	r31, 0x4E	; 78
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_char+0x1c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_char+0x22>
 118:	00 00       	nop
	_delay_ms(10);
	LCD_PORT &= ~(0b00000010); // EN = 0
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	9d 7f       	andi	r25, 0xFD	; 253
 11e:	92 bb       	out	0x12, r25	; 18
 120:	ef e1       	ldi	r30, 0x1F	; 31
 122:	fe e4       	ldi	r31, 0x4E	; 78
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_char+0x2e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_char+0x34>
 12a:	00 00       	nop
	_delay_ms(10);
	// END OF UPPER NIBBLE (4bit) OF DATA
	LCD_PORT |= (0b00000001);// RS = 1
 12c:	92 b3       	in	r25, 0x12	; 18
 12e:	91 60       	ori	r25, 0x01	; 1
 130:	92 bb       	out	0x12, r25	; 18
	LCD_PORT = (LCD_PORT & 0x0F) | ((data<<4) & 0xF0);
 132:	22 b3       	in	r18, 0x12	; 18
 134:	f0 e1       	ldi	r31, 0x10	; 16
 136:	8f 9f       	mul	r24, r31
 138:	c0 01       	movw	r24, r0
 13a:	11 24       	eor	r1, r1
 13c:	92 2f       	mov	r25, r18
 13e:	9f 70       	andi	r25, 0x0F	; 15
 140:	89 2b       	or	r24, r25
 142:	82 bb       	out	0x12, r24	; 18
	LCD_PORT |= (0b00000010); // EN = 1
 144:	82 b3       	in	r24, 0x12	; 18
 146:	82 60       	ori	r24, 0x02	; 2
 148:	82 bb       	out	0x12, r24	; 18
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_char+0x58>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_char+0x5e>
 154:	00 00       	nop
	_delay_ms(10);
	LCD_PORT &= ~(0b00000010); // EN = 0
 156:	82 b3       	in	r24, 0x12	; 18
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	82 bb       	out	0x12, r24	; 18
 15c:	ef e1       	ldi	r30, 0x1F	; 31
 15e:	fe e4       	ldi	r31, 0x4E	; 78
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_char+0x6a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_char+0x70>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_initiate>:
	_delay_ms(10);
	// END OF LOWER NIBBLE (4bit) OF DATA
}
void LCD_initiate(){
	LCD_DDR = 0b11110011;//Setup the DDR Register
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	82 e5       	ldi	r24, 0x52	; 82
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_initiate+0xa>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_initiate+0x14>
 17e:	00 00       	nop
	_delay_ms(300);
	//LCD_config(0x38);// 8 bit mode
	LCD_config(0x33);LCD_config(0x32); // to sync the UPPER PORT OF LCDs and turn off LOWER PORT
 180:	83 e3       	ldi	r24, 0x33	; 51
 182:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 186:	82 e3       	ldi	r24, 0x32	; 50
 188:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
	LCD_config(0x28);// 4-bit 16 character 2 row mode
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
	LCD_config(0x0C);
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
	LCD_config(0x01);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 19e:	8f ec       	ldi	r24, 0xCF	; 207
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_initiate+0x38>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_initiate+0x3e>
 1a8:	00 00       	nop
	_delay_ms(1);
	LCD_config(0x06);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
	LCD_config(0x80);
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 1b6:	08 95       	ret

000001b8 <LCD_print>:
}

void LCD_print(char *str)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	while (*str != '\0')
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <LCD_print+0xe>
	{
		LCD_char(*str);
 1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_char>
		str++;
 1c4:	21 96       	adiw	r28, 0x01	; 1
	LCD_config(0x80);
}

void LCD_print(char *str)
{
	while (*str != '\0')
 1c6:	88 81       	ld	r24, Y
 1c8:	81 11       	cpse	r24, r1
 1ca:	fa cf       	rjmp	.-12     	; 0x1c0 <LCD_print+0x8>
	{
		LCD_char(*str);
		str++;
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <main>:
#include <util/delay.h>
#include "LCD_4BIT.h"

int main(void)
{
	DDRC = 0b11000011;// PC0, PC1, PC6, PC7 as output
 1d2:	83 ec       	ldi	r24, 0xC3	; 195
 1d4:	84 bb       	out	0x14, r24	; 20
	DDRA = 0b00000000; // Inputs at PortA
 1d6:	1a ba       	out	0x1a, r1	; 26
	LCD_initiate();
 1d8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_initiate>
	int count = 0;
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		if (PINA & 0b00000001)
 1e0:	c8 99       	sbic	0x19, 0	; 25
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <main+0x20>
 1e4:	0d c0       	rjmp	.+26     	; 0x200 <__EEPROM_REGION_LENGTH__>
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x18>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x1e>
 1f0:	00 00       	nop
		{
			while (PINA & 0b00000001)
 1f2:	c8 99       	sbic	0x19, 0	; 25
 1f4:	f8 cf       	rjmp	.-16     	; 0x1e6 <main+0x14>
			_delay_ms(1); // debounce
			if (count == 7)
 1f6:	c7 30       	cpi	r28, 0x07	; 7
 1f8:	d1 05       	cpc	r29, r1
 1fa:	89 f0       	breq	.+34     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
			count = 0;
			else
			count = count + 1;
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	14 c0       	rjmp	.+40     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if (PINA & 0b00000010)
 200:	c9 99       	sbic	0x19, 1	; 25
 202:	07 c0       	rjmp	.+14     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 204:	11 c0       	rjmp	.+34     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 206:	8f ec       	ldi	r24, 0xCF	; 207
 208:	97 e0       	ldi	r25, 0x07	; 7
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
		{
			while (PINA & 0b00000010)
 212:	c9 99       	sbic	0x19, 1	; 25
 214:	f8 cf       	rjmp	.-16     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
			_delay_ms(1); // debounce
			if (count == 0)
 216:	20 97       	sbiw	r28, 0x00	; 0
 218:	29 f0       	breq	.+10     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
			count = 7;
			else
			count = count - 1;
 21a:	21 97       	sbiw	r28, 0x01	; 1
 21c:	05 c0       	rjmp	.+10     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		if (PINA & 0b00000001)
		{
			while (PINA & 0b00000001)
			_delay_ms(1); // debounce
			if (count == 7)
			count = 0;
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		else if (PINA & 0b00000010)
		{
			while (PINA & 0b00000010)
			_delay_ms(1); // debounce
			if (count == 0)
			count = 7;
 224:	c7 e0       	ldi	r28, 0x07	; 7
 226:	d0 e0       	ldi	r29, 0x00	; 0
			else
			count = count - 1;
		}
		
		
		if (count == 0)
 228:	20 97       	sbiw	r28, 0x00	; 0
 22a:	51 f4       	brne	.+20     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
		{
			// 0 degree
			PORTC = 0b01000010; // A and D is ON
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 0 Degree   ");
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 23e:	d0 cf       	rjmp	.-96     	; 0x1e0 <main+0xe>
		}
		else if (count == 1)
 240:	c1 30       	cpi	r28, 0x01	; 1
 242:	d1 05       	cpc	r29, r1
 244:	51 f4       	brne	.+20     	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
		{
			// 45 degree
			PORTC = 0b00000010; // A is ON
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 45 Degree   ");
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 250:	8f e6       	ldi	r24, 0x6F	; 111
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 258:	c3 cf       	rjmp	.-122    	; 0x1e0 <main+0xe>
		}
		else if (count == 2)
 25a:	c2 30       	cpi	r28, 0x02	; 2
 25c:	d1 05       	cpc	r29, r1
 25e:	51 f4       	brne	.+20     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
		{
			// 90 degree
			PORTC = 0b00000011; // A and B is ON
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 90 Degree   ");
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 272:	b6 cf       	rjmp	.-148    	; 0x1e0 <main+0xe>
		}
		else if (count == 3)
 274:	c3 30       	cpi	r28, 0x03	; 3
 276:	d1 05       	cpc	r29, r1
 278:	51 f4       	brne	.+20     	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			// 135 degree
			PORTC = 0b00000001; // B is ON
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 135 Degree   ");
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 284:	8f e8       	ldi	r24, 0x8F	; 143
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 28c:	a9 cf       	rjmp	.-174    	; 0x1e0 <main+0xe>
		}
		else if (count == 4)
 28e:	c4 30       	cpi	r28, 0x04	; 4
 290:	d1 05       	cpc	r29, r1
 292:	51 f4       	brne	.+20     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		{
			// 180 degree
			PORTC = 0b10000001; // B and C is ON
 294:	81 e8       	ldi	r24, 0x81	; 129
 296:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 180 Degree   ");
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 29e:	80 ea       	ldi	r24, 0xA0	; 160
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 2a6:	9c cf       	rjmp	.-200    	; 0x1e0 <main+0xe>
		}
		else if (count == 5)
 2a8:	c5 30       	cpi	r28, 0x05	; 5
 2aa:	d1 05       	cpc	r29, r1
 2ac:	49 f4       	brne	.+18     	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
		{
			// 225 degree (-135 degree)
			PORTC = 0b10000000; // C is ON
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 225 Degree   ");
 2b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 2b6:	81 eb       	ldi	r24, 0xB1	; 177
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 2be:	90 cf       	rjmp	.-224    	; 0x1e0 <main+0xe>
		}
		else if (count == 6)
 2c0:	c6 30       	cpi	r28, 0x06	; 6
 2c2:	d1 05       	cpc	r29, r1
 2c4:	51 f4       	brne	.+20     	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
		{
			// 270 degree
			PORTC = 0b11000000; // C and D is ON
 2c6:	80 ec       	ldi	r24, 0xC0	; 192
 2c8:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 270 Degree   ");
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 2d0:	82 ec       	ldi	r24, 0xC2	; 194
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 2d8:	83 cf       	rjmp	.-250    	; 0x1e0 <main+0xe>
		}
		else if (count == 7)
 2da:	c7 30       	cpi	r28, 0x07	; 7
 2dc:	d1 05       	cpc	r29, r1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
 2e0:	7f cf       	rjmp	.-258    	; 0x1e0 <main+0xe>
		{
			// 315 degree
			PORTC = 0b01000000; // D is ON
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	85 bb       	out	0x15, r24	; 21
			LCD_config(0x80);LCD_print("At 315 Degree   ");
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_config>
 2ec:	83 ed       	ldi	r24, 0xD3	; 211
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_print>
 2f4:	75 cf       	rjmp	.-278    	; 0x1e0 <main+0xe>

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
