
LCD (8-Bit-Mode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be7  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000415  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000208  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_Config>:
#include <util/delay.h>

void LCD_Config(uint8_t cmd)
{
	//1. RS pin must be set to 0 for configuration mode
	PORTC = 0b00000000;// EN = 0; RS = 0
  6c:	15 ba       	out	0x15, r1	; 21
	//2. Command must be load on D0-D7 Pins
	PORTD = cmd;
  6e:	82 bb       	out	0x12, r24	; 18
	//3. Generate a Clock Signal 0-1-0
	PORTC = 0b00000010;// EN = 1; RS = 0
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8f e1       	ldi	r24, 0x1F	; 31
  76:	9e e4       	ldi	r25, 0x4E	; 78
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCD_Config+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <LCD_Config+0x12>
  7e:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000000;// EN = 0; RS = 0
  80:	15 ba       	out	0x15, r1	; 21
  82:	8f e1       	ldi	r24, 0x1F	; 31
  84:	9e e4       	ldi	r25, 0x4E	; 78
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_Config+0x1a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_Config+0x20>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <LCD_Char>:
	_delay_ms(10);
}
void LCD_Char(char data)
{
	//1. RS pin must be set to 1 for character mode
	PORTC = 0b00000001;// EN = 0; RS = 1 
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	95 bb       	out	0x15, r25	; 21
	//2. Data must be load on D0-D7 Pins
	PORTD = data;
  94:	82 bb       	out	0x12, r24	; 18
	//3. Generate a Clock Signal 0-1-0
	PORTC = 0b00000011;// EN = 1; RS = 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	85 bb       	out	0x15, r24	; 21
  9a:	ef e1       	ldi	r30, 0x1F	; 31
  9c:	fe e4       	ldi	r31, 0x4E	; 78
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_Char+0xe>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_Char+0x14>
  a4:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000001;// EN = 0; RS = 1
  a6:	95 bb       	out	0x15, r25	; 21
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Char+0x1c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Char+0x22>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_Init>:
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <LCD_Init+0x6>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Init+0x10>
  c6:	00 00       	nop
void LCD_Init()
{
	// To init LCD, first wait for 300ms to let LCD boot
	_delay_ms(300);
	// 1. Set LCD mode to 8-bit, 16 character, 2 row
	LCD_Config(0x38); 
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
	// 0x30 (16 char 1 row 8b)/ 0x28 (16 char 2 row 4b)/ 0x20 (16 char 1 row 4b)
	//2. Set the cursor of LCD
	LCD_Config(0x0E); // 0x0E (Solid)/ 0x0F (blinky)/ 0x0C (OFF)
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
	//3. Clear the LCD
	LCD_Config(0x01); // CLEAR
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Init+0x28>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Init+0x2e>
  e4:	00 00       	nop
	_delay_ms(1);
	//4. Set the display direction from Left->Right
	LCD_Config(0x06); // 0x04 (Right->Left)
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
	//5. Set the starting Point of Display
	LCD_Config(0x80);
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
  f2:	08 95       	ret

000000f4 <main>:
}

int main(void)
{
	DDRC = 0b00000011; // EN,RS
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111; // D7-D0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	81 bb       	out	0x11, r24	; 17
	LCD_Init();
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Init>
	while (1) 
    {
		if (PINA & 0b00000001)
 100:	c8 9b       	sbis	0x19, 0	; 25
 102:	25 c0       	rjmp	.+74     	; 0x14e <main+0x5a>
		{
			LCD_Config(0x80); 
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
			LCD_Char('B');
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('U');
 110:	85 e5       	ldi	r24, 0x55	; 85
 112:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 116:	84 e5       	ldi	r24, 0x54	; 84
 118:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 11c:	84 e5       	ldi	r24, 0x54	; 84
 11e:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 122:	8f e4       	ldi	r24, 0x4F	; 79
 124:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 128:	8e e4       	ldi	r24, 0x4E	; 78
 12a:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('1');
 12e:	81 e3       	ldi	r24, 0x31	; 49
 130:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 13a:	8f e4       	ldi	r24, 0x4F	; 79
 13c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 140:	8e e4       	ldi	r24, 0x4E	; 78
 142:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
 14c:	24 c0       	rjmp	.+72     	; 0x196 <main+0xa2>
		}
		else
		{
			LCD_Config(0x80);
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
			LCD_Char('B');
 154:	82 e4       	ldi	r24, 0x42	; 66
 156:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('U');
 15a:	85 e5       	ldi	r24, 0x55	; 85
 15c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 160:	84 e5       	ldi	r24, 0x54	; 84
 162:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 166:	84 e5       	ldi	r24, 0x54	; 84
 168:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 16c:	8f e4       	ldi	r24, 0x4F	; 79
 16e:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 172:	8e e4       	ldi	r24, 0x4E	; 78
 174:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('1');
 178:	81 e3       	ldi	r24, 0x31	; 49
 17a:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 184:	8f e4       	ldi	r24, 0x4F	; 79
 186:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('F');
 18a:	86 e4       	ldi	r24, 0x46	; 70
 18c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('F');
 190:	86 e4       	ldi	r24, 0x46	; 70
 192:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
		}
		if (PINA & 0b10000000)
 196:	cf 9b       	sbis	0x19, 7	; 25
 198:	25 c0       	rjmp	.+74     	; 0x1e4 <main+0xf0>
		{
			LCD_Config(0xC0);
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
			LCD_Char('B');
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('U');
 1a6:	85 e5       	ldi	r24, 0x55	; 85
 1a8:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 1ac:	84 e5       	ldi	r24, 0x54	; 84
 1ae:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 1b2:	84 e5       	ldi	r24, 0x54	; 84
 1b4:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 1b8:	8f e4       	ldi	r24, 0x4F	; 79
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 1be:	8e e4       	ldi	r24, 0x4E	; 78
 1c0:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('2');
 1c4:	82 e3       	ldi	r24, 0x32	; 50
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 1d0:	8f e4       	ldi	r24, 0x4F	; 79
 1d2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 1d6:	8e e4       	ldi	r24, 0x4E	; 78
 1d8:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
 1e2:	8e cf       	rjmp	.-228    	; 0x100 <main+0xc>
		}
		else
		{
			LCD_Config(0xC0);
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Config>
			LCD_Char('B');
 1ea:	82 e4       	ldi	r24, 0x42	; 66
 1ec:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('U');
 1f0:	85 e5       	ldi	r24, 0x55	; 85
 1f2:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 1f6:	84 e5       	ldi	r24, 0x54	; 84
 1f8:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('T');
 1fc:	84 e5       	ldi	r24, 0x54	; 84
 1fe:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 202:	8f e4       	ldi	r24, 0x4F	; 79
 204:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('N');
 208:	8e e4       	ldi	r24, 0x4E	; 78
 20a:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('2');
 20e:	82 e3       	ldi	r24, 0x32	; 50
 210:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char(' ');
 214:	80 e2       	ldi	r24, 0x20	; 32
 216:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('O');
 21a:	8f e4       	ldi	r24, 0x4F	; 79
 21c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('F');
 220:	86 e4       	ldi	r24, 0x46	; 70
 222:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
			LCD_Char('F');
 226:	86 e4       	ldi	r24, 0x46	; 70
 228:	0e 94 48 00 	call	0x90	; 0x90 <LCD_Char>
 22c:	69 cf       	rjmp	.-302    	; 0x100 <main+0xc>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
