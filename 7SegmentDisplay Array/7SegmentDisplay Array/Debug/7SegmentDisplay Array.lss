
7SegmentDisplay Array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
// sevenSeg  .gfedcba
	DDRC = 0b01111111;
  80:	8f e7       	ldi	r24, 0x7F	; 127
  82:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b01111111;
  84:	81 bb       	out	0x11, r24	; 17
	
	uint8_t segment[10];
	segment[0] = 0b00111111;// digit 0
  86:	9f e3       	ldi	r25, 0x3F	; 63
  88:	99 83       	std	Y+1, r25	; 0x01
	segment[1] = 0b00000110;// digit 1
  8a:	96 e0       	ldi	r25, 0x06	; 6
  8c:	9a 83       	std	Y+2, r25	; 0x02
	segment[2] = 0b01011011;// digit 2
  8e:	9b e5       	ldi	r25, 0x5B	; 91
  90:	9b 83       	std	Y+3, r25	; 0x03
	segment[3] = 0b01001111;// digit 3
  92:	9f e4       	ldi	r25, 0x4F	; 79
  94:	9c 83       	std	Y+4, r25	; 0x04
	segment[4] = 0b01100110;// digit 4
  96:	96 e6       	ldi	r25, 0x66	; 102
  98:	9d 83       	std	Y+5, r25	; 0x05
	segment[5] = 0b01101101;// digit 5
  9a:	9d e6       	ldi	r25, 0x6D	; 109
  9c:	9e 83       	std	Y+6, r25	; 0x06
	segment[6] = 0b01111101;// digit 6
  9e:	9d e7       	ldi	r25, 0x7D	; 125
  a0:	9f 83       	std	Y+7, r25	; 0x07
	segment[7] = 0b00000111;// digit 7
  a2:	97 e0       	ldi	r25, 0x07	; 7
  a4:	98 87       	std	Y+8, r25	; 0x08
	segment[8] = 0b01111111;// digit 8
  a6:	89 87       	std	Y+9, r24	; 0x09
	segment[9] = 0b01101111;// digit 9
  a8:	8f e6       	ldi	r24, 0x6F	; 111
  aa:	8a 87       	std	Y+10, r24	; 0x0a
	
    while (1) 
    {
		for (int digit1 = 0; digit1 <= 9; digit1 = digit1 + 1)
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	22 c0       	rjmp	.+68     	; 0xf6 <main+0x8a>
		{
			for (int digit2 = 0; digit2 <= 9; digit2 = digit2 + 1)
			{
				PORTC = segment[digit2];
  b2:	e1 e0       	ldi	r30, 0x01	; 1
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	e8 0f       	add	r30, r24
  bc:	f9 1f       	adc	r31, r25
  be:	20 81       	ld	r18, Z
  c0:	25 bb       	out	0x15, r18	; 21
				PORTD = segment[digit1];
  c2:	e1 e0       	ldi	r30, 0x01	; 1
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ec 0f       	add	r30, r28
  c8:	fd 1f       	adc	r31, r29
  ca:	e4 0f       	add	r30, r20
  cc:	f5 1f       	adc	r31, r21
  ce:	20 81       	ld	r18, Z
  d0:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	39 e6       	ldi	r19, 0x69	; 105
  d6:	68 e1       	ldi	r22, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	60 40       	sbci	r22, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
	
    while (1) 
    {
		for (int digit1 = 0; digit1 <= 9; digit1 = digit1 + 1)
		{
			for (int digit2 = 0; digit2 <= 9; digit2 = digit2 + 1)
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x80>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	04 f3       	brlt	.-64     	; 0xb2 <main+0x46>
	segment[8] = 0b01111111;// digit 8
	segment[9] = 0b01101111;// digit 9
	
    while (1) 
    {
		for (int digit1 = 0; digit1 <= 9; digit1 = digit1 + 1)
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	4a 30       	cpi	r20, 0x0A	; 10
  f8:	51 05       	cpc	r21, r1
  fa:	b4 f3       	brlt	.-20     	; 0xe8 <main+0x7c>
  fc:	d7 cf       	rjmp	.-82     	; 0xac <main+0x40>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
