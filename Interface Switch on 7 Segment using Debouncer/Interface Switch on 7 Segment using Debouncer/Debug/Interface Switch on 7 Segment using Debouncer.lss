
Interface Switch on 7 Segment using Debouncer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010b  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0b00000000; // PA0 and PA7 as INPUT
  96:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b01111111; // PC0 to PC6 as 7 Segment output
  98:	8f e7       	ldi	r24, 0x7F	; 127
  9a:	84 bb       	out	0x14, r24	; 20
	uint8_t gunjan_segment[10] = {~0b00111111,//0
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
									~0b01111101,//6
									~0b00000111,//7
									~0b01111111,//8
									~0b01101111 //9
	};
	int counter = 0;
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	while (1) 
    {
		if (PINA == 0b00000001)
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	81 f4       	brne	.+32     	; 0xd8 <main+0x56>
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x42>
  c4:	00 00       	nop
		{
			while (PINA == 0b00000001)
  c6:	89 b3       	in	r24, 0x19	; 25
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	b9 f3       	breq	.-18     	; 0xba <main+0x38>
			{
				_delay_ms(10);// wait here till switch is released
			}
			if (counter == 9)
  cc:	29 30       	cpi	r18, 0x09	; 9
  ce:	31 05       	cpc	r19, r1
  d0:	b1 f0       	breq	.+44     	; 0xfe <main+0x7c>
				counter = 0;
			else
				counter = counter + 1;
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	18 c0       	rjmp	.+48     	; 0x108 <main+0x86>
		}
		else if (PINA == 0b10000000)
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	80 38       	cpi	r24, 0x80	; 128
  dc:	a9 f4       	brne	.+42     	; 0x108 <main+0x86>
  de:	06 c0       	rjmp	.+12     	; 0xec <main+0x6a>
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x62>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x68>
  ea:	00 00       	nop
		{
			while (PINA == 0b10000000)
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	80 38       	cpi	r24, 0x80	; 128
  f0:	b9 f3       	breq	.-18     	; 0xe0 <main+0x5e>
			{
				_delay_ms(10);// wait here till switch is released
			}
			if (counter == 0)
  f2:	21 15       	cp	r18, r1
  f4:	31 05       	cpc	r19, r1
  f6:	31 f0       	breq	.+12     	; 0x104 <main+0x82>
				counter = 9;
			else
				counter = counter - 1;
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
  fc:	05 c0       	rjmp	.+10     	; 0x108 <main+0x86>
			while (PINA == 0b00000001)
			{
				_delay_ms(10);// wait here till switch is released
			}
			if (counter == 9)
				counter = 0;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x86>
			while (PINA == 0b10000000)
			{
				_delay_ms(10);// wait here till switch is released
			}
			if (counter == 0)
				counter = 9;
 104:	29 e0       	ldi	r18, 0x09	; 9
 106:	30 e0       	ldi	r19, 0x00	; 0
			else
				counter = counter - 1;
		}
		PORTC = gunjan_segment[counter];
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	80 81       	ld	r24, Z
 116:	85 bb       	out	0x15, r24	; 21
    }
 118:	cc cf       	rjmp	.-104    	; 0xb2 <main+0x30>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
