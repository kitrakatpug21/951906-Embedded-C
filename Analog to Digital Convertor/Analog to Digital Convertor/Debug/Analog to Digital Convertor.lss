
Analog to Digital Convertor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f1  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRA = 0b00000000; // ADC Input on PORTA
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b11111111;// 8 LEDs on PORTC
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000011;// 2 LEDs on PORTD
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	81 bb       	out	0x11, r24	; 17
	///// ADC Setting ////////
	ADMUX = 0b01000011; // ADC: Single Ended MOde on ADC3, LSB-MSB, Ext Ref Volt
  76:	83 e4       	ldi	r24, 0x43	; 67
  78:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110; // ADC: ADC Mode, Prescale by 64	
  7a:	86 e8       	ldi	r24, 0x86	; 134
  7c:	86 b9       	out	0x06, r24	; 6
	while (1) 
    {
		ADCSRA = ADCSRA | 0b01000000;
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	80 64       	ori	r24, 0x40	; 64
  82:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & 0b00010000)==0)
  84:	34 9b       	sbis	0x06, 4	; 6
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
		{/*until the flag is 0, wait here*/}
		PORTC = ADCL;
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	85 bb       	out	0x15, r24	; 21
		PORTD = ADCH;
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	82 bb       	out	0x12, r24	; 18
    }
  90:	f6 cf       	rjmp	.-20     	; 0x7e <main+0x12>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
