
ADC_TempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c1  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  000007ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRA = 0b00000000; // ADC Input on PORTA
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b00000111; // 3 LEDs on PORTC
  6e:	87 e0       	ldi	r24, 0x07	; 7
  70:	84 bb       	out	0x14, r24	; 20
	///// ADC Setting ////////
	ADMUX = 0b01000011; // ADC: Single Ended MOde on ADC3, LSB-MSB, Ext Ref Volt
  72:	83 e4       	ldi	r24, 0x43	; 67
  74:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110; // ADC: ADC Mode, Prescale by 64	
  76:	86 e8       	ldi	r24, 0x86	; 134
  78:	86 b9       	out	0x06, r24	; 6
	while (1) 
    {
		ADCSRA = ADCSRA | 0b01000000;
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & 0b00010000)==0)
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
		{/*until the flag is 0, wait here*/}
		
		if (ADC >= 30 && ADC < 40)
  84:	84 b1       	in	r24, 0x04	; 4
  86:	95 b1       	in	r25, 0x05	; 5
  88:	4e 97       	sbiw	r24, 0x1e	; 30
  8a:	38 f0       	brcs	.+14     	; 0x9a <main+0x2e>
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	88 97       	sbiw	r24, 0x28	; 40
  92:	18 f4       	brcc	.+6      	; 0x9a <main+0x2e>
		{
			PORTC = 0b00000001;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
  98:	f0 cf       	rjmp	.-32     	; 0x7a <main+0xe>
		}
		else if (ADC >= 40 && ADC < 50)
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	88 97       	sbiw	r24, 0x28	; 40
  a0:	38 f0       	brcs	.+14     	; 0xb0 <main+0x44>
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	c2 97       	sbiw	r24, 0x32	; 50
  a8:	18 f4       	brcc	.+6      	; 0xb0 <main+0x44>
		{
			PORTC = 0b00000011;
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	e5 cf       	rjmp	.-54     	; 0x7a <main+0xe>
		}
		else if (ADC >= 40 && ADC < 50)
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	88 97       	sbiw	r24, 0x28	; 40
  b6:	38 f0       	brcs	.+14     	; 0xc6 <main+0x5a>
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	c2 97       	sbiw	r24, 0x32	; 50
  be:	18 f4       	brcc	.+6      	; 0xc6 <main+0x5a>
		{
			PORTC = 0b00000011;
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	da cf       	rjmp	.-76     	; 0x7a <main+0xe>
		}
		else if (ADC >= 50 && ADC < 60)
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	c2 97       	sbiw	r24, 0x32	; 50
  cc:	38 f0       	brcs	.+14     	; 0xdc <main+0x70>
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	cc 97       	sbiw	r24, 0x3c	; 60
  d4:	18 f4       	brcc	.+6      	; 0xdc <main+0x70>
		{
			PORTC = 0b00000101;
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	85 bb       	out	0x15, r24	; 21
  da:	cf cf       	rjmp	.-98     	; 0x7a <main+0xe>
		}
		else if (ADC >= 60 && ADC < 70)
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	cc 97       	sbiw	r24, 0x3c	; 60
  e2:	40 f0       	brcs	.+16     	; 0xf4 <main+0x88>
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	86 34       	cpi	r24, 0x46	; 70
  ea:	91 05       	cpc	r25, r1
  ec:	18 f4       	brcc	.+6      	; 0xf4 <main+0x88>
		{
			PORTC = 0b00000110;
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	c3 cf       	rjmp	.-122    	; 0x7a <main+0xe>
		}
		else if (ADC >= 70)
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	86 34       	cpi	r24, 0x46	; 70
  fa:	91 05       	cpc	r25, r1
  fc:	18 f0       	brcs	.+6      	; 0x104 <main+0x98>
		{
			PORTC = 0b00000111;
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	85 bb       	out	0x15, r24	; 21
 102:	bb cf       	rjmp	.-138    	; 0x7a <main+0xe>
		}
		else
		{
			PORTC = 0b00000000;
 104:	15 ba       	out	0x15, r1	; 21
 106:	b9 cf       	rjmp	.-142    	; 0x7a <main+0xe>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
