
7Segment Matrix Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000778  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025b  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    uint8_t gunjan_segment[10] = {0b00111111,//0
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	    0b01111101,//6
	    0b00000111,//7
	    0b01111111,//8
	    0b01101111 //9
    };
	DDRC = 0b01111111; // PC6 to PC0 are used for segment
  a8:	8f e7       	ldi	r24, 0x7F	; 127
  aa:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00001111; // Com Pins
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	81 bb       	out	0x11, r24	; 17
	while (1) 
    {
		for (int thou = 0; thou <= 2; thou = thou + 1)
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	78 c0       	rjmp	.+240    	; 0x1a6 <main+0x124>
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
					{
						for (int repeat = 0; repeat <1; repeat = repeat + 1)
						{
							if (thou == 2 && hund == 3 && tens == 5 && ones == 9)
  b6:	62 30       	cpi	r22, 0x02	; 2
  b8:	71 05       	cpc	r23, r1
  ba:	89 f4       	brne	.+34     	; 0xde <main+0x5c>
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b1 05       	cpc	r27, r1
  c0:	71 f4       	brne	.+28     	; 0xde <main+0x5c>
  c2:	05 30       	cpi	r16, 0x05	; 5
  c4:	11 05       	cpc	r17, r1
  c6:	59 f4       	brne	.+22     	; 0xde <main+0x5c>
  c8:	29 30       	cpi	r18, 0x09	; 9
  ca:	31 05       	cpc	r19, r1
  cc:	41 f4       	brne	.+16     	; 0xde <main+0x5c>
							{
								thou = hund = tens = ones = 0;
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
							}
							PORTD = 0b00001110;
  de:	4e e0       	ldi	r20, 0x0E	; 14
  e0:	42 bb       	out	0x12, r20	; 18
							PORTC = gunjan_segment[ones];
  e2:	e1 e0       	ldi	r30, 0x01	; 1
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ec 0f       	add	r30, r28
  e8:	fd 1f       	adc	r31, r29
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	40 81       	ld	r20, Z
  f0:	45 bb       	out	0x15, r20	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ef e1       	ldi	r30, 0x1F	; 31
  f4:	fe e4       	ldi	r31, 0x4E	; 78
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x74>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7a>
  fc:	00 00       	nop
							_delay_ms(10);
							PORTD = 0b00001101;
  fe:	4d e0       	ldi	r20, 0x0D	; 13
 100:	42 bb       	out	0x12, r20	; 18
							PORTC = gunjan_segment[tens];
 102:	e1 e0       	ldi	r30, 0x01	; 1
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	e0 0f       	add	r30, r16
 10c:	f1 1f       	adc	r31, r17
 10e:	40 81       	ld	r20, Z
 110:	45 bb       	out	0x15, r20	; 21
 112:	ef e1       	ldi	r30, 0x1F	; 31
 114:	fe e4       	ldi	r31, 0x4E	; 78
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x94>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9a>
 11c:	00 00       	nop
							_delay_ms(10);
							PORTD = 0b00001011;
 11e:	4b e0       	ldi	r20, 0x0B	; 11
 120:	42 bb       	out	0x12, r20	; 18
							PORTC = gunjan_segment[hund];
 122:	e1 e0       	ldi	r30, 0x01	; 1
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	ea 0f       	add	r30, r26
 12c:	fb 1f       	adc	r31, r27
 12e:	40 81       	ld	r20, Z
 130:	45 bb       	out	0x15, r20	; 21
							PORTC = PORTC | 0b10000000;
 132:	45 b3       	in	r20, 0x15	; 21
 134:	40 68       	ori	r20, 0x80	; 128
 136:	45 bb       	out	0x15, r20	; 21
 138:	ef e1       	ldi	r30, 0x1F	; 31
 13a:	fe e4       	ldi	r31, 0x4E	; 78
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0xba>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xc0>
 142:	00 00       	nop
							_delay_ms(10);
							PORTD = 0b00000111;
 144:	47 e0       	ldi	r20, 0x07	; 7
 146:	42 bb       	out	0x12, r20	; 18
							PORTC = gunjan_segment[thou];
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e6 0f       	add	r30, r22
 152:	f7 1f       	adc	r31, r23
 154:	40 81       	ld	r20, Z
 156:	45 bb       	out	0x15, r20	; 21
 158:	ef e1       	ldi	r30, 0x1F	; 31
 15a:	fe e4       	ldi	r31, 0x4E	; 78
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xda>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xe0>
 162:	00 00       	nop
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
					{
						for (int repeat = 0; repeat <1; repeat = repeat + 1)
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xea>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	18 16       	cp	r1, r24
 16e:	19 06       	cpc	r1, r25
 170:	0c f0       	brlt	.+2      	; 0x174 <main+0xf2>
 172:	a1 cf       	rjmp	.-190    	; 0xb6 <main+0x34>
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0xfc>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	2a 30       	cpi	r18, 0x0A	; 10
 180:	31 05       	cpc	r19, r1
 182:	94 f3       	brlt	.-28     	; 0x168 <main+0xe6>
    {
		for (int thou = 0; thou <= 2; thou = thou + 1)
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x10c>
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	06 30       	cpi	r16, 0x06	; 6
 190:	11 05       	cpc	r17, r1
 192:	9c f3       	brlt	.-26     	; 0x17a <main+0xf8>
	DDRD = 0b00001111; // Com Pins
	while (1) 
    {
		for (int thou = 0; thou <= 2; thou = thou + 1)
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	02 c0       	rjmp	.+4      	; 0x19c <main+0x11a>
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	aa 30       	cpi	r26, 0x0A	; 10
 19e:	b1 05       	cpc	r27, r1
 1a0:	a4 f3       	brlt	.-24     	; 0x18a <main+0x108>
    };
	DDRC = 0b01111111; // PC6 to PC0 are used for segment
	DDRD = 0b00001111; // Com Pins
	while (1) 
    {
		for (int thou = 0; thou <= 2; thou = thou + 1)
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	63 30       	cpi	r22, 0x03	; 3
 1a8:	71 05       	cpc	r23, r1
 1aa:	b4 f3       	brlt	.-20     	; 0x198 <main+0x116>
 1ac:	81 cf       	rjmp	.-254    	; 0xb0 <main+0x2e>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
