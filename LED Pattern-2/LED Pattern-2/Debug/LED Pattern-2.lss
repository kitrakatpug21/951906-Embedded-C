
LED Pattern-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRC = 0b11111111; // all pins in PORTC are set as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
    DDRA = 0b11111111; // all pins in PORTA are set as OUTPUT
  70:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		for (int i = 0; i <= 7; i = i+1)
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	1c c0       	rjmp	.+56     	; 0xb0 <main+0x44>
		{
			PORTC = (0b00000001 << i);
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	08 2e       	mov	r0, r24
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <main+0x14>
  88:	25 bb       	out	0x15, r18	; 21
			PORTA = (0b10000000 >> i);
  8a:	20 e8       	ldi	r18, 0x80	; 128
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	08 2e       	mov	r0, r24
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	35 95       	asr	r19
  94:	27 95       	ror	r18
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x26>
  9a:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	30 e7       	ldi	r19, 0x70	; 112
  a0:	42 e0       	ldi	r20, 0x02	; 2
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	40 40       	sbci	r20, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
{
    DDRC = 0b11111111; // all pins in PORTC are set as OUTPUT
    DDRA = 0b11111111; // all pins in PORTA are set as OUTPUT
    while (1) 
    {
		for (int i = 0; i <= 7; i = i+1)
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	91 05       	cpc	r25, r1
  b4:	0c f3       	brlt	.-62     	; 0x78 <main+0xc>
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	1c c0       	rjmp	.+56     	; 0xf4 <main+0x88>
			PORTA = (0b10000000 >> i);
			_delay_ms(100);
		}
		for (int i = 7; i >= 0; i = i-1)
		{
			PORTC = (0b00000001 << i);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x5c>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <main+0x58>
  cc:	25 bb       	out	0x15, r18	; 21
			PORTA = (0b10000000 >> i);
  ce:	20 e8       	ldi	r18, 0x80	; 128
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	08 2e       	mov	r0, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x6e>
  d6:	35 95       	asr	r19
  d8:	27 95       	ror	r18
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x6a>
  de:	2b bb       	out	0x1b, r18	; 27
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	30 e7       	ldi	r19, 0x70	; 112
  e4:	42 e0       	ldi	r20, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x7a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
		{
			PORTC = (0b00000001 << i);
			PORTA = (0b10000000 >> i);
			_delay_ms(100);
		}
		for (int i = 7; i >= 0; i = i-1)
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	99 23       	and	r25, r25
  f6:	14 f7       	brge	.-60     	; 0xbc <main+0x50>
  f8:	bc cf       	rjmp	.-136    	; 0x72 <main+0x6>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
